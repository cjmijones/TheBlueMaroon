/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  VaultFactory,
  VaultFactoryInterface,
} from "../../contracts/VaultFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_impl",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedDeployment",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nft",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "VaultCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    name: "createVault",
    outputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "predictVault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610988380380610988833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b6080516108646101246000396000818160f90152818161012a015261018101526108646000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354bcc021146100465780635c60da1b14610076578063aef7f20e14610094575b600080fd5b610060600480360381019061005b91906104b8565b6100c4565b60405161006d919061051a565b60405180910390f35b61007e610128565b60405161008b919061051a565b60405180910390f35b6100ae60048036038101906100a9919061059a565b61014c565b6040516100bb919061051a565b60405180910390f35b6000808484846040516020016100dc939291906106bf565b60405160208183030381529060405280519060200120905061011e7f00000000000000000000000000000000000000000000000000000000000000008261027e565b9150509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080888833604051602001610164939291906106bf565b6040516020818303038152906040528051906020012090506101a67f000000000000000000000000000000000000000000000000000000000000000082610293565b91508173ffffffffffffffffffffffffffffffffffffffff1663d8ff82868a8a8a8a8a8a8a6040518863ffffffff1660e01b81526004016101ed9796959493929190610769565b600060405180830381600087803b15801561020757600080fd5b505af115801561021b573d6000803e3d6000fd5b50505050878973ffffffffffffffffffffffffffffffffffffffff167f5d4148e45f0546a8062f1ee632d2c40d70799edcca9aac21129328809dffa52c848a3360405161026a939291906107ce565b60405180910390a350979650505050505050565b600061028b8383306102a9565b905092915050565b60006102a183836000610320565b905092915050565b60006040518260388201526f5af43d82803e903d91602b57fd5bf3ff6024820152846014820152733d602d80600a3d3981f3363d3d373d3d3d363d7381528360588201526037600c820120607882015273ffffffffffffffffffffffffffffffffffffffff60556043830120169150509392505050565b6000814710156103695747826040517fcf479181000000000000000000000000000000000000000000000000000000008152600401610360929190610805565b60405180910390fd5b763d602d80600a3d3981f3363d3d373d3d3d363d730000008460601b60e81c176000526e5af43d82803e903d91602b57fd5bf38460781b17602052826037600984f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610413576040517fb06ebf3d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9392505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044f82610424565b9050919050565b61045f81610444565b811461046a57600080fd5b50565b60008135905061047c81610456565b92915050565b6000819050919050565b61049581610482565b81146104a057600080fd5b50565b6000813590506104b28161048c565b92915050565b6000806000606084860312156104d1576104d061041a565b5b60006104df8682870161046d565b93505060206104f0868287016104a3565b92505060406105018682870161046d565b9150509250925092565b61051481610444565b82525050565b600060208201905061052f600083018461050b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261055a57610559610535565b5b8235905067ffffffffffffffff8111156105775761057661053a565b5b6020830191508360018202830111156105935761059261053f565b5b9250929050565b600080600080600080600060a0888a0312156105b9576105b861041a565b5b60006105c78a828b0161046d565b97505060206105d88a828b016104a3565b96505060406105e98a828b016104a3565b955050606088013567ffffffffffffffff81111561060a5761060961041f565b5b6106168a828b01610544565b9450945050608088013567ffffffffffffffff8111156106395761063861041f565b5b6106458a828b01610544565b925092505092959891949750929550565b60008160601b9050919050565b600061066e82610656565b9050919050565b600061068082610663565b9050919050565b61069861069382610444565b610675565b82525050565b6000819050919050565b6106b96106b482610482565b61069e565b82525050565b60006106cb8286610687565b6014820191506106db82856106a8565b6020820191506106eb8284610687565b601482019150819050949350505050565b61070581610482565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610748838561070b565b935061075583858461071c565b61075e8361072b565b840190509392505050565b600060a08201905061077e600083018a61050b565b61078b60208301896106fc565b61079860408301886106fc565b81810360608301526107ab81868861073c565b905081810360808301526107c081848661073c565b905098975050505050505050565b60006060820190506107e3600083018661050b565b6107f060208301856106fc565b6107fd604083018461050b565b949350505050565b600060408201905061081a60008301856106fc565b61082760208301846106fc565b939250505056fea264697066735822122013e3918cad617aa10dfe04b0022e9ee3dc4a736e95df1bebd77b1dc65bf3423864736f6c634300081c0033";

type VaultFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VaultFactory__factory extends ContractFactory {
  constructor(...args: VaultFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _impl: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_impl, overrides || {});
  }
  override deploy(
    _impl: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_impl, overrides || {}) as Promise<
      VaultFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VaultFactory__factory {
    return super.connect(runner) as VaultFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultFactoryInterface {
    return new Interface(_abi) as VaultFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VaultFactory {
    return new Contract(address, _abi, runner) as unknown as VaultFactory;
  }
}
