import { useAccount, useBalance } from "wagmi";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useChain } from "../context/ChainContext";
import { api } from "../lib/api";            // ðŸ‘ˆ NEW â€“ our Axios instance

/**
 * Returns:
 *   â€¢ nativeWei (BigInt)     â€“ on-chain native balance
 *   â€¢ usdc      (number)     â€“ ERC-20 USDC (6-dec)
 *   â€¢ loading   (boolean)
 *   â€¢ refresh() (cache invalidation helper)
 *
 * Reads on-chain native balance via wagmi _and_ hits the server aggregate
 * route `/api/wallets/:addr/balances?chain_id=â€¦` for token balances.
 */
export function useWalletBalances() {
  /* ------------------------------------------------------------------ */
  /* 1) Which chain to operate on                                       */
  /* ------------------------------------------------------------------ */
  const { address, chain: walletChain } = useAccount();
  const appDefaultChainId = useChain();            // from <ChainContext.Provider>
  const effectiveChainId  = walletChain?.id ?? appDefaultChainId;
  const queryClient       = useQueryClient();

  /* ------------------------------------------------------------------ */
  /* 2) On-chain native balance (wagmi)                                 */
  /* ------------------------------------------------------------------ */
  const {
    data: nativeBalance,
    isFetching: fetchingNative,
    queryKey: nativeKey,          // auto-generated by wagmi
  } = useBalance({
    address,
    chainId: effectiveChainId,
    query: {
      enabled: Boolean(address),
      refetchInterval: false,
    },
  });

  /* ------------------------------------------------------------------ */
  /* 3) Server-side aggregate (native + ERC-20)                         */
  /* ------------------------------------------------------------------ */
  const {
    data: server,
    isFetching: fetchingServer,
  } = useQuery({
    queryKey: ["wallet-balances", address, effectiveChainId],
    enabled: Boolean(address),
    queryFn: async () => {
      const { data } = await api.get<{
        native_wei: string;
        usdc: string | number;
      }>(`/wallets/${address}/balances`, {
        params: { chain_id: effectiveChainId },
      });

      return {
        nativeWei: BigInt(data.native_wei),
        usdc:      Number(data.usdc),
      };
    },
    staleTime: 15_000,      // backend already caches for 15 s
    refetchInterval: false,
  });

  /* ------------------------------------------------------------------ */
  /* 4) Public API                                                      */
  /* ------------------------------------------------------------------ */
  return {
    nativeWei: nativeBalance?.value ?? server?.nativeWei ?? 0n,
    usdc:      server?.usdc ?? 0,
    loading:   fetchingNative || fetchingServer,
    refresh: () => {
      queryClient.invalidateQueries({ queryKey: nativeKey });
      queryClient.invalidateQueries({
        queryKey: ["wallet-balances", address, effectiveChainId],
      });
    },
  };
}
